---
# file: roles/swarmhost/main.yml
# The tasks in this file configure machines that serve as hosts for
# Docker Swarm.
# See: http://blog.toast38coza.me/docker-swarm-with-ansible-a-late-swarmweek-entry/
# See: https://docs.docker.com/swarm/install-w-machine/
# See: https://docs.docker.com/swarm/install-manual/
# See: http://blog.scottlowe.org/2015/03/06/running-own-docker-swarm-cluster/


# We want to keep the nodes in the swarm in-sync with the inventory
# in the hosts file.  We do this by querying the swarm status of each
# node that is a swarm manager and putting them into one of two groups
# "active" (activeSwarmManagers) or "inactive".  If the active group is empty, we select one
# of the nodes in the inactive group to be the swarm manager and start
# (init) it.  If the active group is not empty, then we have an existing
# swarm and we don't need to start (bootstrap) it.  In either case, once
# the swarm is established, we have the nodes in the inactive group
# join the swarm through an existing, active, swarm manager.  This will
# support changes to the inventory file such as adding additional nodes
# to the swarm.

# First, we query each of the swarm manager nodes for their status,
# then we put each into either the active or inactive groups.
- name: Query the host for its status as a docker swarm node
  docker_swarm_node_status: 
  register: swarm_status
  when: isUnix
  tags: [swarm, swarmmanager]

- debug: var=swarm_status
  tags: [swarm, swarmmanager]
  
# Put the hosts into one of two groups  
# Active Managers
- name: Create the active docker swarm manager group
  add_host:
    hostname: "{{item}}"
    groups: activeSwarmManagers  
  with_items: "{{play_hosts}}"
  when: "swarm_status.isActive"
  run_once: true
  
# Inactive Managers
- name: Create the inactive docker swarm manager group
  add_host:
    hostname: "{{item}}"
    groups: inactiveSwarmManagers  
  with_items: "{{play_hosts}}"
  when: "not swarm_status.isActive"
  run_once: true  
  
# If the group of active swarm managers is empty, we need to start
# up a manager.

- hosts: inactiveSwarmManagers[0]
  become: true
  tasks:
    - name: Initialize a Swarm Manager
      shell: docker swarm init --advertise-addr={{default('eth0')}}:2377
      when: "'activeSwarmManagers' not in groups"
      register: swarmStart
      
    - name: Add new swarm manager to active group
      add_host:
         hostname: "{{play_hosts[0]}}"
         groups: activeSwarmManagers
      when: swarmStart

  
  
  
  
  
#  when: true
  
# Swarm Manager
#---------------------------------------------------------------  
#- name: Launch the Swarm Manager Docker image 
#  docker_container: 
#          name: "{{swarm_manager_name}}_{{ansible_hostname}}"
#          image: "{{swarm_image}}"
#          state: started
#          published_ports:
#             - "{{swarm_manager_port}}:{{swarm_manager_port}}"
#          command: "manage -H :{{swarm_manager_port}} --advertise {{swarm_manager_ip}}:{{swarm_manager_port}} consul://{{swarm_consul_ip}}:{{swarm_consul_port}}/{{swarm_consul_path}}"
#  when: is_unix and is_swarm_manager 
#  tags: [swarm, swarmmanager]
  
# This can "fail" if the network already exists. Ignore. DAF
#- name: Create the Docker overlay network "{{swarm_overlay_network_name}}".
#  command: docker network create --driver overlay --subnet={{swarm_overlay_network_subnet}} {{swarm_overlay_network_name}}
#  ignore_errors: true
#  when: is_unix and is_swarm_manager 
#  tags: [swarm, swarmmanager, overlaynetwork]


- debug:
    msg: "System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}"
  
# Swarm Node
#---------------------------------------------------------------  
#- name: Launch the Swarm Node Docker image 
#  docker_container: 
#          name: "{{swarm_node_name}}_{{ansible_hostname}}"
#          image: "{{swarm_image}}"
#          state: started
#          command: "join --advertise '{{ ansible_all_ipv4_addresses | ipaddr(swarm_bind_addr_ip_filter) | random }}':2375 consul://{{swarm_consul_ip}}:{{swarm_consul_port}}/{{swarm_consul_path}}"
#  when: is_unix and not is_swarm_manager 
#  tags: [swarm, swarmnode]